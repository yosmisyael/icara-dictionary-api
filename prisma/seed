import { PrismaClient, Prisma, SignLanguage } from '../generated/prisma';
import { promises as fs } from 'fs';
import * as path from 'node:path';
import 'dotenv/config';

const prisma = new PrismaClient();

/**
 * Reads a text file containing a list of filenames (one per line)
 * and returns them as an array of strings.
 * @param filename The name of the file to read (e.g., 'data.txt').
 * @returns A promise that resolves to an array of filenames.
 */
async function readAndParseFile(filename: string): Promise<string[]> {
  try {
    const filePath = path.join(__dirname, filename);
    const fileContent = await fs.readFile(filePath, 'utf-8');
    // Split by newline and filter out any empty lines
    return fileContent.split('\n').filter((entry) => entry.trim() !== '');
  } catch (error) {
    console.error(`Error reading file ${filename}:`, error);
    return [];
  }
}

async function main() {
  console.log('Starting database seeding...');

  // Assumes the list of .m3u8 files is in a file named 'data.txt'
  // in the same directory as this script.
  const fileNames = await readAndParseFile('data.txt');

  const streamServer = process.env.STREAM_SERVER;

  if (!streamServer) {
    console.error(
      'STREAM_SERVER environment variable is not set. Please check your .env file.',
    );
    process.exit(1);
  }

  // A map to handle compound words and create relevant aliases.
  // The key should match the name part from the filename (e.g., "mengapa_kenapa").
  const aliasMap: { [key: string]: string[] } = {
    mengapa_kenapa: ['mengapa', 'kenapa'],
    dimana_kemana: ['dimana', 'di mana', 'ke mana'],
    terima_kasih: ['terimakasih'],
  };

  console.log(`Found ${fileNames.length} files to process...`);

  for (const rawFilename of fileNames) {
    // Example rawFilename: "BISINDO-terima_kasih.m3u8"

    // 1. Get the part without the extension
    const nameWithPrefix = rawFilename.replace('.m3u8', ''); // "BISINDO-terima_kasih"

    // 2. Split by the first hyphen to separate prefix and name
    const parts = nameWithPrefix.split(/-(.+)/);
    if (parts.length < 2) {
      console.warn(`Skipping malformed filename: ${rawFilename}`);
      continue;
    }
    const signLang = parts[0] as SignLanguage; // "BISINDO"
    const namePart = parts[1]; // "terima_kasih"

    // 3. Replace underscores with spaces to get the final name for display
    const finalName = namePart.replace(/_/g, ' '); // "terima kasih"

    // 4. Determine the type (LETTER or WORD)
    const type = finalName.length === 1 ? 'LETTER' : 'WORD';

    // 5. Construct the full URL for the stream
    const url = `${streamServer}/${rawFilename}`;

    // 6. Construct the base data object for Prisma
    const entryData: Prisma.EntryCreateInput = {
      name: finalName,
      url: url,
      signLang: signLang,
      type: type,
      source: 'https://youtube.com', // Default source
    };

    // 7. Check for and add aliases if they exist for the given word
    const aliases = aliasMap[namePart];
    if (aliases && aliases.length > 0 && type === 'WORD') {
      entryData.aliases = {
        create: aliases.map((alias) => ({ name: alias })),
      };
    }

    // 8. Create the entry in the database
    console.log(`Creating entry for: "${finalName}"`);
    await prisma.entry.create({ data: entryData });
  }

  console.log('Seeding completed successfully!');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
